1, 垃圾回收名词
   1)部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，
   其中又分为：
        新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。
        老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单 独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，
            在不同资料上常有不同所指， 读者需按上下文区分到底是指老年代的收集还是整堆收集。
        混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。
   2)整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。
2, 垃圾回收日志详解，见AllocationTest.java文件

虚拟机在Server模式和Client模式下的各种参数可能会有很大的不同，
可以使用-XX:+PrintFlagsFinal参数。这里以JIT编译阈值和最大堆为例，
展示Client模式和Server模式的区别。

CompileThreshold的默认值为1500，即函数被调用1500次后，会进行JIT编译。
对于系统最大堆，在Client模式下为约256MB，而在Server模式下约为1GB。
并行GC前额外触发的新生代GC
参数-XX:-ScavengeBeforeFullGC去除发生在Full GC之前的那次新生代GC。
在默认情况下，ScavengeBeforeFullGC的值为true。

TLAB的全称是Thread Local Allocation Buffer，即线程本地分配缓存。
从名字上可以看到，TLAB是一个线程专用的内存分配区域。
Java虚拟机就使用了TLAB这种线程专属的区域来避免多线程冲突，
提高对象分配的效率。TLAB本身占用了eden区的空间。在TLAB启用的情况下，
虚拟机会为每一个Java线程分配一块TLAB区域。

1.与串行回收器相关的参数
·-XX：+UseSerialGC：在新生代和老年代使用串行回收器。
·-XX：SurvivorRatio：设置eden区大小和survivior区大小的比例。
·-XX：PretenureSizeThreshold：设置大对象直接进入老年代的阈值。当对象的大小超过这个值时，将直接被分配在老年代。
·-XX：MaxTenuringThreshold：设置对象进入老年代的年龄的最大值。每一次 Minor GC后，对象年龄就加1。任何大于这个年龄的对象，一定会进入老年代。
2.与并行GC相关的参数
·-XX：+UseParNewGC（考虑到兼容性问题，JDK 9、JDK 10已经删除）：在新生代使用并行回收器。
·-XX：+UseParallelOldGC：老年代使用并行回收器。
·-XX：ParallelGCThreads：设置用于垃圾回收的线程数。通常情况下可以和CPU数量相等，但在CPU数量比较多的情况下，设置相对较小的数值也是合理的。
·-XX：MaxGCPauseMillis：设置最大垃圾回收停顿时间。它的值是一个大于0的整数。回收器在工作时，会调整 Java 堆大小或者其他一些参数，尽可能地把停顿时间控制在MaxGCPauseMillis以内。
·-XX：GCTimeRatio：设置吞吐量大小。它的值是一个 0 到 100 之间的整数。假设GCTimeRatio的值为n ，那么系统将花费不超过1/（1+n ）的时间用于垃圾回收。
·-XX：+UseAdaptiveSizePolicy：打开自适应GC策略。在这种模式下，新生代的大小、eden区和survivior区的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡。
3.与CMS回收器相关的参数（JDK9、JDK10已经开始废弃CMS回收器，建议使用G1回收器）
·-XX：+UseConcMarkSweepGC：新生代使用并行回收器，老年代使用CMS+串行回收器。
·-XX：ParallelCMSThreads：设定CMS的线程数量。
·-XX：CMSInitiatingOccupancyFraction：设置 CMS 回收器在老年代空间被使用多少后触发，默认为68%。
·-XX：+UseCMSCompactAtFullCollection：设置 CMS 回收器在完成垃圾回收后是否要进行一次内存碎片的整理。
·-XX：CMSFullGCsBeforeCompaction：设定进行多少次CMS垃圾回收后，进行一次内存压缩。
·-XX：+CMSClassUnloadingEnabled：允许对类元数据区进行回收。
·-XX：CMSInitiatingPermOccupancyFraction：当永久区占用率达到这一百分比时，启动CMS回收（前提是激活了-XX：+CMSClassUnloadingEnabled）。
·-XX：UseCMSInitiatingOccupancyOnly：表示只在到达阈值的时候才进行CMS回收。
·-XX：+CMSIncrementalMode：使用增量模式，比较适合单CPU。增量模式在JDK 8中标记为废弃，并且将在JDK 9中彻底移除。
4.与G1回收器相关的参数
·-XX：+UseG1GC：使用G1回收器。
·-XX：MaxGCPauseMillis：设置最大垃圾回收停顿时间。
·-XX：GCPauseIntervalMillis：设置停顿间隔时间。
5.TLAB相关
·-XX：+UseTLAB：开启TLAB分配。
·-XX：+PrintTLAB（考虑到兼容性问题，JDK 9、JDK 10不再支持此参数）：打印TLAB相关分配信息。
·-XX：TLABSize：设置TLAB区域大小。
·-XX：+ResizeTLAB：自动调整TLAB区域大小。
6.其他参数
·-XX：+DisableExplicitGC：禁用显式GC。
·-XX：+ExplicitGCInvokesConcurrent：使用并发方式处理显式GC。
